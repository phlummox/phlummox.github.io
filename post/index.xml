<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on phlummox&#39;s blog</title>
    <link>https://phlummox.dev/post/</link>
    <description>Recent content in Posts on phlummox&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://phlummox.dev/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Backing Things Up</title>
      <link>https://phlummox.dev/post/backing-things-up/</link>
      <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://phlummox.dev/post/backing-things-up/</guid>
      <description>/u/bigheadsmith just asked on Reddit about good solutions for local and remote backups for home PCs &amp;ndash; so I offered an outline of my current backup regime. Only a couple of responses so far, but suggestions seem to converge around rclone and restic being good solutions on Linux. Restic also received a lot of enthusiastic support on a recent-ish Hacker News post, with some users saying they&amp;rsquo;d switched to restic from borg.</description>
    </item>
    
    <item>
      <title>Android command-line tools cheat sheet</title>
      <link>https://phlummox.dev/post/android-cl-cheat-sheet/</link>
      <pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://phlummox.dev/post/android-cl-cheat-sheet/</guid>
      <description>A reminder to myself. I do work on Android apps rarely enough that I can never remember what the tools and commands are for different tasks &amp;ndash; so I started putting together a &amp;ldquo;cheat sheet&amp;rdquo; for my own use for Android dev–related command-line tools.
Reddit post here, where someone pointed out this massively useful reference for adb commands.</description>
    </item>
    
    <item>
      <title>Running Azure&#39;s &lt;samp&gt;az&lt;/samp&gt; command-line tool from a docker container; or, the &#34;credentials in a container&#34; trick
</title>
      <link>https://phlummox.dev/post/azure-in-docker/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://phlummox.dev/post/azure-in-docker/</guid>
      <description>.web-login { display: block; padding: 0.5em; font-size: 13px; font-family: Menlo,Monaco,Consolas,&#34;Courier New&#34;,monospace; margin: 0 0 0.5ex; word-wrap: break-word; background-color: #f5f5f5; border: 1px solid #ccc; border-radius: 4px; }  Every cloud platform provider has their own CLI tool they want you to install, all with different dependencies and install methods. Some want you to install their tools using Snap; some want you to run install scripts as root that add files not managed by your OS’s package management system;1 some want you to click through a license where you agree to be bound by the laws of Germany.</description>
    </item>
    
    <item>
      <title>Installing Travis cli</title>
      <link>https://phlummox.dev/post/installing-travis-cli/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://phlummox.dev/post/installing-travis-cli/</guid>
      <description>li { margin-top: 18pt; }  A reminder to myself on how to install the Travis CLI command-line tool on Ubuntu (which is the only time I ever make use of Ruby, and which I only ever do when installing a fresh OS).
Install Ruby.
$ sudo apt install ruby ruby-dev Install the Travis gem.
gem install --user-install travis The output of this will include a warning that “You don’t have /home/​phlummox/​.</description>
    </item>
    
    <item>
      <title>Ubuntu libsqliteodbc bug</title>
      <link>https://phlummox.dev/post/ubuntu-libsqliteodbc-bug/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://phlummox.dev/post/ubuntu-libsqliteodbc-bug/</guid>
      <description>Putting this here so I can find it again&amp;hellip;
On Ubuntu 16.04, libsqliteodbc1 installs dynamic library files to the wrong directory.2
Instead of putting libsqlite3odbc.so in /usr/lib/x86_64-linux-gnu, it puts it in a subdirectory, odbc. And then libreoffice-base3 looks for it in the normal place and can&amp;rsquo;t find it, leading to runtime errors if you try to connect via ODBC to an Sqlite3 database:
The connection to the data source &amp;#34;MY_DATA_SOURCE&amp;#34; could not be established.</description>
    </item>
    
    <item>
      <title>Accessing the filesystem of a running Docker container</title>
      <link>https://phlummox.dev/post/accessing-docker-container-fs/</link>
      <pubDate>Mon, 30 Jul 2018 12:34:02 +0800</pubDate>
      
      <guid>https://phlummox.dev/post/accessing-docker-container-fs/</guid>
      <description>Well that&amp;rsquo;s neat &amp;mdash; there&amp;rsquo;s a quick-and-dirty trick for accessing the filesystem of a running Docker container from your host machine. Not especially safe, but much quicker than messing around with ssh servers etc. within the container.
So, within the proc filesystem, /proc/some-pid/root/ exposes the root filesystem that process some-pid is running on. So we can do the following, to get an interactive shell on that filesystem:
  Find some process that’s running inside the container, that we can uniquely identify.</description>
    </item>
    
    <item>
      <title>When running &#39;stack setup&#39; for ghcjs…</title>
      <link>https://phlummox.dev/post/setting-up-ghcjs/</link>
      <pubDate>Wed, 25 Jul 2018 03:38:32 +0800</pubDate>
      
      <guid>https://phlummox.dev/post/setting-up-ghcjs/</guid>
      <description>… make sure you don&amp;rsquo;t have cabal in your path. Otherwise you&amp;rsquo;ll get odd build errors, and ghcjs will never install: see this issue on the ghcjs issue tracker.</description>
    </item>
    
  </channel>
</rss>
